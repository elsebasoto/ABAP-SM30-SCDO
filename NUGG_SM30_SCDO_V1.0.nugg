<?xml version="1.0" encoding="utf-8"?>
<nugget name="SM30_SCDO_V1.0">
 <CLAS CLSNAME="ZCX_SM30_SCDO" VERSION="1" LANGU="E" DESCRIPT="SAP Changed Document in SM30 Exception Class" CATEGORY="40" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk" REFCLSNAME="CX_STATIC_CHECK">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="FUNCTION_NOT_FOUND" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="The WRITE_DOCUMENT function does not exist."/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="NOT_FOUND" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="There are not change document object for &amp;VIEWNAME&amp;."/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="NOT_GENERATION" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="The object &amp;OBJECT&amp; has not generation object."/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="NOT_RELATED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="The object &amp;OBJECT&amp; and the view &amp;VIEWNAME&amp; are not related."/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="NOT_UNIQUE" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SOTR_CONC" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " LOCKED="X" TYPESRC_LENG="0 ">
   <sotr PAKET="$TMP" CREA_LAN="E" TRALA_TYPE="1" LST_IMPORT="00000000" TRALA_VEC="00000000000000000000" CATGY_VEC="00000000000000000000" OBJID_VEC="08000000000000000000">
    <sotrText LANGU="E" LFD_NUM="0001" FLAG_CNTXT="X" STATUS="R" VERSION="0002" LENGTH="255" TEXT="There are multiple change document object for &amp;VIEWNAME&amp;. You must set one."/>
   </sotr>
  </attribute>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object class" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TCDOB-OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCX_SM30_SCDO" CMPNAME="VIEWNAME" VERSION="1" LANGU="E" DESCRIPT="Name of SAP table view" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="VIMDESC-VIEWNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <inheritance CLSNAME="ZCX_SM30_SCDO" REFCLSNAME="CX_STATIC_CHECK" VERSION="1" STATE="1"/>
 </CLAS>
 <CLAS CLSNAME="ZCLBC_SM30_SCDO" VERSION="1" LANGU="E" DESCRIPT="SAP Changed Document in SM30" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
  <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="C_DELETE_ACTION" VERSION="1" LANGU="E" DESCRIPT="Delete" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;D&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CDHDR-CHANGE_IND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="C_INSERT_ACTION" VERSION="1" LANGU="E" DESCRIPT="Insert" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="2" ATTVALUE="&apos;I&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CDHDR-CHANGE_IND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="C_UPDATE_ACTION" VERSION="1" LANGU="E" DESCRIPT="Update" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="2" ATTVALUE="&apos;U&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CDHDR-CHANGE_IND" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="O_TOTAL_TABLE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="T_KEY" VERSION="1" LANGU="E" DESCRIPT="Table with Field Names of Key Figures" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="CF_T_FZWERT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="V_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object class" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TCDOB-OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="V_VIEWNAME" VERSION="1" LANGU="E" DESCRIPT="Name of SAP table view" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="VIMDESC-VIEWNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="ADD_RECORD_TABLE" VERSION="1" LANGU="E" DESCRIPT="Add a single record into the TOTAL_TABLE" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="ADD_RECORD_TABLE" SCONAME="IM_DATA" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="ADD_RECORD_TABLE" SCONAME="IM_ACTION" VERSION="1" LANGU="E" DESCRIPT="Change Action" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR01"/>
   <source>METHOD add_record_table.

  DATA: ol_line TYPE REF TO data.

  FIELD-SYMBOLS: &lt;fsl_table&gt;        TYPE STANDARD TABLE,
                 &lt;fsl_line&gt;         TYPE ANY,
                 &lt;fsl_action_field&gt; TYPE ANY.

** Action values
** N = New entry
** U = Updated entry
** D = Deleted entry
** X = Deleted new entry
**   = Without changes

  IF im_action CA &apos;X &apos;.
    RETURN.
  ENDIF.

  ASSIGN me-&gt;o_total_table-&gt;* TO &lt;fsl_table&gt;.

  CREATE DATA ol_line LIKE LINE OF &lt;fsl_table&gt;.
  ASSIGN ol_line-&gt;* TO &lt;fsl_line&gt;.

  MOVE-CORRESPONDING im_data TO &lt;fsl_line&gt;.

  ASSIGN COMPONENT &apos;ACTION&apos; OF STRUCTURE &lt;fsl_line&gt; TO &lt;fsl_action_field&gt;.

  &lt;fsl_action_field&gt; = im_action.

  APPEND &lt;fsl_line&gt; TO &lt;fsl_table&gt;.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CHECK_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Exist object? If was not set, is unique?" EXPOSURE="0" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CHECK_OBJECT" SCONAME="ZCX_SM30_SCDO" VERSION="1" LANGU="E" DESCRIPT="SAP Changed Document in SM30 Exception Class" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD check_object.

  DATA: vl_count    TYPE i,
        vl_funcname TYPE rs38l-name.

* Check the change document
  IF me-&gt;v_object IS INITIAL.

    SELECT COUNT(*)
    FROM tcdob
    INTO vl_count
    WHERE tabname EQ me-&gt;v_viewname.

    CASE vl_count.
      WHEN 0. &quot; Do not exist change document object.

        RAISE EXCEPTION TYPE zcx_sm30_scdo
          EXPORTING
            textid   = zcx_sm30_scdo=&gt;not_found
            viewname = me-&gt;v_viewname.

      WHEN 1. &quot; The view has an unique change document object

        SELECT SINGLE object
        FROM tcdob
        INTO me-&gt;v_object
        WHERE tabname EQ me-&gt;v_viewname.

      WHEN OTHERS. &quot; The view has multiple change document objects and do not know who use

        RAISE EXCEPTION TYPE zcx_sm30_scdo
          EXPORTING
            textid   = zcx_sm30_scdo=&gt;not_unique
            viewname = me-&gt;v_viewname.

    ENDCASE.

  ENDIF.

* Check if the object and the viewname are related
  SELECT COUNT(*)
  FROM tcdob
  INTO vl_count
  WHERE object  EQ me-&gt;v_object
    AND tabname EQ me-&gt;v_viewname.

  IF vl_count EQ 0.

    RAISE EXCEPTION TYPE zcx_sm30_scdo
      EXPORTING
        textid   = zcx_sm30_scdo=&gt;not_related
        viewname = me-&gt;v_viewname
        object   = me-&gt;v_object.

  ENDIF.

* Check if the generation object exist
  SELECT COUNT(*)
  FROM tcdrp
  INTO vl_count
  WHERE object EQ me-&gt;v_object.

  IF vl_count EQ 0.

    RAISE EXCEPTION TYPE zcx_sm30_scdo
      EXPORTING
        textid   = zcx_sm30_scdo=&gt;not_generation
        object   = me-&gt;v_object.

  ENDIF.

* Check if exist the WRITE_DOCUMENT function
  vl_funcname = me-&gt;get_function_name( ).

  CALL FUNCTION &apos;FUNCTION_EXISTS&apos;
    EXPORTING
      funcname           = vl_funcname
    EXCEPTIONS
      function_not_exist = 1
      OTHERS             = 2.

  IF sy-subrc NE 0.

    RAISE EXCEPTION TYPE zcx_sm30_scdo
      EXPORTING
        textid   = zcx_sm30_scdo=&gt;function_not_found.

  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" DESCRIPT="Constructor" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CONSTRUCTOR" SCONAME="IM_VIEWNAME" VERSION="1" LANGU="E" DESCRIPT="Name of SAP table view" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="VIMDESC-VIEWNAME"/>
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CONSTRUCTOR" SCONAME="IM_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object class (obligatory if is not unique)" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TCDOB-OBJECT" PAROPTIONL="X"/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CONSTRUCTOR" SCONAME="ZCX_SM30_SCDO" VERSION="1" LANGU="E" DESCRIPT="SAP Changed Document in SM30 Exception Class" MTDTYPE="2" EDITORDER="1 "/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CONSTRUCTOR" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="2" EDITORDER="2 "/>
   <source>METHOD constructor.

  DATA: tl_table_definition TYPE dd03ttyp.

* Set the view or table name and the change data object
  me-&gt;v_viewname = im_viewname.
  me-&gt;v_object   = im_object.

* Check the change document object
  CALL METHOD me-&gt;check_object.

* Read table or view definition
  CALL METHOD me-&gt;read_tabl_def
    IMPORTING
      ex_table_definition = tl_table_definition.

* Fill key fields table
  CALL METHOD me-&gt;fill_key_fields
    EXPORTING
      im_table_definition = tl_table_definition.

* Use the table definition to create the dynamic table
  CALL METHOD me-&gt;create_dynamic_table
    EXPORTING
      im_table_definition = tl_table_definition.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_TABLE" VERSION="1" LANGU="E" DESCRIPT="Create the dynamic table to convert the TOTAL table" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_TABLE" SCONAME="IM_TABLE_DEFINITION" VERSION="1" LANGU="E" DESCRIPT="Table Type for Structure DD03P" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DD03TTYP"/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_TABLE" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD create_dynamic_table.

  DATA tl_fieldcat          TYPE lvc_t_fcat.

  DATA: wl_table_definition TYPE LINE OF dd03ttyp,
        wl_fieldcat         TYPE LINE OF lvc_t_fcat.

* Fill the table definition

  LOOP AT im_table_definition INTO wl_table_definition.

    CLEAR wl_fieldcat.

    wl_fieldcat-fieldname = wl_table_definition-fieldname.
    wl_fieldcat-outputlen = wl_table_definition-outputlen.
    wl_fieldcat-tabname   = me-&gt;v_viewname.
    wl_fieldcat-ref_table = me-&gt;v_viewname.
    wl_fieldcat-ref_field = wl_table_definition-fieldname.
    wl_fieldcat-col_pos   = wl_table_definition-position.
    wl_fieldcat-key       = wl_table_definition-keyflag.

    APPEND wl_fieldcat TO tl_fieldcat.

    AT LAST.

      CLEAR wl_fieldcat.

      wl_fieldcat-fieldname = &apos;ACTION&apos;.
      wl_fieldcat-outputlen = &apos;1&apos;.
      wl_fieldcat-col_pos   = LINES( tl_fieldcat ) + 1.

      APPEND wl_fieldcat TO tl_fieldcat.

    ENDAT.

  ENDLOOP.

* Create the dynamic table

  CALL METHOD cl_alv_table_create=&gt;create_dynamic_table
    EXPORTING
      it_fieldcatalog           = tl_fieldcat
    IMPORTING
      ep_table                  = me-&gt;o_total_table
    EXCEPTIONS
      generate_subpool_dir_full = 1
      OTHERS                    = 2.

  IF sy-subrc NE 0.
    me-&gt;raise_system_exception( ).
  ENDIF.


ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_WHERE" VERSION="1" LANGU="E" DESCRIPT="Create the dynamic where for the READ_DATA_TABLE method" EXPOSURE="0" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_WHERE" SCONAME="IM_INPUT" VERSION="1" LANGU="E" DESCRIPT="Input data (new values)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_WHERE" SCONAME="RE_WHERE" VERSION="1" LANGU="E" DESCRIPT="Where condition" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="STRING"/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="CREATE_DYNAMIC_WHERE" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD create_dynamic_where.

  DATA: tl_range TYPE STANDARD TABLE OF crmselstr,
        tl_cond  TYPE STANDARD TABLE OF mcondition.

  DATA: wl_range TYPE crmselstr,
        wl_cond  TYPE mcondition.

  DATA: vl_key   TYPE LINE OF cf_t_fzwert.

  FIELD-SYMBOLS: &lt;fsl_field&gt; TYPE ANY.

  wl_range-sign   = &apos;I&apos;.
  wl_range-option = &apos;EQ&apos;.

  LOOP AT me-&gt;t_key INTO vl_key.

    CLEAR: wl_range-field,
           wl_range-low.

    UNASSIGN &lt;fsl_field&gt;.

    ASSIGN COMPONENT vl_key OF STRUCTURE im_input TO &lt;fsl_field&gt;.

    wl_range-field = vl_key.
    wl_range-low   = &lt;fsl_field&gt;.
    APPEND wl_range TO tl_range.

  ENDLOOP.

  CALL FUNCTION &apos;CRS_CREATE_WHERE_CONDITION&apos;
    TABLES
      ti_range      = tl_range
      to_cond       = tl_cond
    EXCEPTIONS
      invalid_input = 1
      OTHERS        = 2.

  IF sy-subrc NE 0.
    CALL METHOD raise_system_exception.
  ENDIF.

  LOOP AT tl_cond into wl_cond.

    CONCATENATE re_where wl_cond-cond into re_where.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="FILL_KEY_FIELDS" VERSION="1" LANGU="E" DESCRIPT="Fill the key fields table" EXPOSURE="0" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="FILL_KEY_FIELDS" SCONAME="IM_TABLE_DEFINITION" VERSION="1" LANGU="E" DESCRIPT="Table Type for Structure DD03P" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="DD03TTYP"/>
   <source>METHOD fill_key_fields.

  DATA: wl_table_definition TYPE LINE OF dd03ttyp.

  LOOP AT im_table_definition INTO wl_table_definition WHERE fieldname NE &apos;MANDT&apos;
                                                         AND keyflag   EQ abap_true.
    APPEND wl_table_definition-fieldname TO me-&gt;t_key.
  ENDLOOP.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="GET_FUNCTION_NAME" VERSION="1" LANGU="E" DESCRIPT="Get WRITE_DOCUMENT function name" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="GET_FUNCTION_NAME" SCONAME="RE_FUNCTION_NAME" VERSION="1" LANGU="E" DESCRIPT="Name of Function Module" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="RS38L-NAME"/>
   <source>METHOD get_function_name.

  CONCATENATE me-&gt;v_object
              &apos;_WRITE_DOCUMENT&apos;
  INTO re_function_name.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="RAISE_SYSTEM_EXCEPTION" VERSION="1" LANGU="E" DESCRIPT="Raise System Message Exception" EXPOSURE="0" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="RAISE_SYSTEM_EXCEPTION" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD raise_system_exception.

  TYPES: BEGIN OF tyl_t100_msg_data,
           msgid  TYPE sy-msgid,
           msgno  TYPE sy-msgno,
           msgv1  TYPE string,
           msgv2  TYPE string,
           msgv3  TYPE string,
           msgv4  TYPE string,
         END OF tyl_t100_msg_data .

  DATA: wl_t100_msg TYPE tyl_t100_msg_data.

  MOVE-CORRESPONDING syst TO wl_t100_msg.

  RAISE EXCEPTION TYPE cx_t100_msg
    EXPORTING
      t100_msgid = wl_t100_msg-msgid
      t100_msgno = wl_t100_msg-msgno
      t100_msgv1 = wl_t100_msg-msgv1
      t100_msgv2 = wl_t100_msg-msgv2
      t100_msgv3 = wl_t100_msg-msgv3
      t100_msgv4 = wl_t100_msg-msgv4.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_DATA_TABLE" VERSION="1" LANGU="E" DESCRIPT="Read the data registry" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_DATA_TABLE" SCONAME="IM_INPUT" VERSION="1" LANGU="E" DESCRIPT="Input data (new values)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_DATA_TABLE" SCONAME="EX_OUTPUT" VERSION="1" LANGU="E" DESCRIPT="Output data (old values)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_DATA_TABLE" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD read_data_table.

  DATA: vl_where TYPE string.

  CALL METHOD me-&gt;create_dynamic_where
    EXPORTING
      im_input = im_input
    RECEIVING
      re_where = vl_where.

  SELECT SINGLE *
  FROM (me-&gt;v_viewname)
  INTO ex_output
  WHERE (vl_where).

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_TABL_DEF" VERSION="1" LANGU="E" DESCRIPT="Get Table Definition" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_TABL_DEF" SCONAME="EX_TABLE_DEFINITION" VERSION="1" LANGU="E" DESCRIPT="Table Type for Structure DD03P" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="DD03TTYP"/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="READ_TABL_DEF" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD read_tabl_def.

  DATA: vl_name TYPE ddobjname.

  vl_name = me-&gt;v_viewname.

  CALL FUNCTION &apos;DDIF_TABL_GET&apos;
    EXPORTING
      name          = vl_name
    TABLES
      dd03p_tab     = ex_table_definition
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc NE 0.
    me-&gt;raise_system_exception( ).
  ENDIF.

ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="SAVE_LOG" VERSION="1" LANGU="E" DESCRIPT="Save the data log into the CDHDR &amp; CDPOS tables" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="SAVE_LOG" SCONAME="ZCX_SM30_SCDO" VERSION="1" LANGU="E" DESCRIPT="SAP Changed Document in SM30 Exception Class" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCLBC_SM30_SCDO" CMPNAME="SAVE_LOG" SCONAME="CX_T100_MSG" VERSION="1" LANGU="E" DESCRIPT="Exception Class with Error Messages from Table T100" MTDTYPE="0" EDITORDER="2 "/>
   <source>METHOD save_log.

  DATA: ol_line               TYPE REF TO data,
        ol_old_data           TYPE REF TO data.

  DATA: tl_function_import    TYPE abap_func_parmbind_tab.

  DATA: wl_function_import    TYPE LINE OF abap_func_parmbind_tab.

  DATA: vl_key                TYPE LINE OF cf_t_fzwert,
        vl_objectid           TYPE cdhdr-objectid,
        vl_function_name      TYPE rs38l-name,
        vl_length             TYPE i,
        vl_offset             TYPE i.

  FIELD-SYMBOLS: &lt;fsl_table&gt;  TYPE ANY TABLE,
                 &lt;fsl_line&gt;   TYPE ANY,
                 &lt;fsl_new&gt;    TYPE ANY,
                 &lt;fsl_old&gt;    TYPE ANY,
                 &lt;fsl_action&gt; TYPE ANY,
                 &lt;fsl_key&gt;    TYPE ANY.

* Get the function name
  vl_function_name = me-&gt;get_function_name( ).

  ASSIGN me-&gt;o_total_table-&gt;* TO &lt;fsl_table&gt;.

  CREATE DATA ol_line LIKE LINE OF &lt;fsl_table&gt;.
  ASSIGN ol_line-&gt;* TO &lt;fsl_line&gt;.

  CREATE DATA ol_old_data TYPE (me-&gt;v_viewname).
  ASSIGN ol_old_data-&gt;* TO &lt;fsl_old&gt;.

  LOOP AT &lt;fsl_table&gt; INTO &lt;fsl_line&gt;.

    CLEAR: tl_function_import,
           vl_objectid.

    ASSIGN COMPONENT &apos;ACTION&apos; OF STRUCTURE &lt;fsl_line&gt; TO &lt;fsl_action&gt;.

    ASSIGN &lt;fsl_line&gt; TO &lt;fsl_new&gt; CASTING TYPE (me-&gt;v_viewname).

    IF &lt;fsl_action&gt; CA &apos;UD&apos;.

      CLEAR &lt;fsl_old&gt;.

      CALL METHOD me-&gt;read_data_table
        EXPORTING
          im_input  = &lt;fsl_new&gt;
        IMPORTING
          ex_output = &lt;fsl_old&gt;.

    ENDIF.

*   The Object ID is the key table concatenated
    wl_function_import-name = &apos;OBJECTID&apos;.
    wl_function_import-kind = abap_func_exporting.

    LOOP AT me-&gt;t_key INTO vl_key.

      UNASSIGN &lt;fsl_key&gt;.

      ASSIGN COMPONENT vl_key OF STRUCTURE &lt;fsl_line&gt; TO &lt;fsl_key&gt;.

      DESCRIBE FIELD &lt;fsl_key&gt; LENGTH vl_length IN CHARACTER MODE.

      vl_objectid+vl_offset(vl_length) = &lt;fsl_key&gt;.

      ADD vl_length TO vl_offset.

    ENDLOOP.

    GET REFERENCE OF vl_objectid INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

*   Transaction Code is not hardcoded because if use a Z transaction as shortcut this data will be lost.

    CLEAR wl_function_import.
    wl_function_import-name = &apos;TCODE&apos;.
    wl_function_import-kind = abap_func_exporting.
    GET REFERENCE OF sy-tcode INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

*   System hour &amp; date and User Name.
    CLEAR wl_function_import.
    wl_function_import-name = &apos;UTIME&apos;.
    wl_function_import-kind = abap_func_exporting.
    GET REFERENCE OF sy-uzeit INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

    CLEAR wl_function_import.
    wl_function_import-name = &apos;UDATE&apos;.
    wl_function_import-kind = abap_func_exporting.
    GET REFERENCE OF sy-datum INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

    CLEAR wl_function_import.
    wl_function_import-name = &apos;USERNAME&apos;.
    wl_function_import-kind = abap_func_exporting.
    GET REFERENCE OF sy-uname INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

*   User action (Change, Insert, Delete)
    CLEAR wl_function_import.
    wl_function_import-name = &apos;OBJECT_CHANGE_INDICATOR&apos;.
    wl_function_import-kind = abap_func_exporting.

    CASE &lt;fsl_action&gt;.
      WHEN &apos;N&apos;.
        GET REFERENCE OF me-&gt;c_insert_action INTO wl_function_import-value.
      WHEN &apos;U&apos;.
        GET REFERENCE OF me-&gt;c_update_action INTO wl_function_import-value.
      WHEN &apos;D&apos;.
        GET REFERENCE OF me-&gt;c_delete_action INTO wl_function_import-value.
    ENDCASE.

    INSERT wl_function_import INTO TABLE tl_function_import.

    CONCATENATE &apos;UPD_&apos;
                me-&gt;v_viewname
    INTO wl_function_import-name.

    INSERT wl_function_import INTO TABLE tl_function_import.

*   New values
    CLEAR: wl_function_import.

    CONCATENATE &apos;N_&apos;
                me-&gt;v_viewname
    INTO wl_function_import-name.

    wl_function_import-kind = abap_func_exporting.
    GET REFERENCE OF &lt;fsl_new&gt; INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

*   Old values if was update or delete
    CLEAR: wl_function_import.

    CONCATENATE &apos;O_&apos;
                me-&gt;v_viewname
    INTO wl_function_import-name.

    wl_function_import-kind = abap_func_exporting.
    GET REFERENCE OF &lt;fsl_old&gt; INTO wl_function_import-value.
    INSERT wl_function_import INTO TABLE tl_function_import.

*   Call the function.
    CALL FUNCTION vl_function_name
      PARAMETER-TABLE
        tl_function_import.

  ENDLOOP.

ENDMETHOD.</source>
  </method>
 </CLAS>
</nugget>
